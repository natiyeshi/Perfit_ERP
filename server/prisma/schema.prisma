generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  UNKNOWN
  DATA_AGGREGATOR
  SALES_PERSON
  ADMIN
}

model User {
  id          String       @id @unique @default(cuid())
  fullName    String
  email       String       @unique
  password    String
  salesPerson SalesPerson?
  role        ROLE         @default(UNKNOWN)
  flag        Flag?

  @@index([email])
  @@map("users")
}

model Flag {
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id])
  isSuspended Boolean @default(false) @map("is_suspended")
}

model Product {
  id    String @id @unique @default(cuid())
  name  String
  batch Int
  unit  String
  brand String

  supplier            Supplier?            @relation(fields: [supplierId], references: [id])
  supplierId          String?
  inventories         Inventory[]
  IDOMs               IODM[]
  pipelines           Pipeline[]
  transactions        Transaction[]
  competitorImports   CompetitorImport[]
  imports             Import[]
  CompetitorInventory CompetitorInventory?

  @@map("products")
}

model RegisteredProduct {
  id String @id @unique @default(cuid())

  @@map("registered_products")
}

model Supplier {
  id               String  @id @unique @default(cuid())
  manufacturerName String
  email            String? @unique
  phoneNumber      String? @map("phone_number")
  country          String?

  deliverableProducts Product[]

  competitorImports CompetitorImport[]
  imports           Import[]

  @@map("suppliers")
}

model Competitor {
  id                 String             @id @unique @default(cuid())
  name               String
  email              String?            @unique
  phoneNumber        String?            @map("phone_number")
  country            String?
  isDirectCompetitor Boolean            @default(false) @map("is_direct_competitor")
  competitorImports  CompetitorImport[]

  @@map("competitors")
}

model CompetitorInventory {
  id           String @id @unique @default(cuid())
  sellingPrice Float  @map("selling_price") // Saling price

  productId String  @unique
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  @@map("competitor_inventories")
}

model CompetitorImport {
  id        String @id @unique @default(cuid())
  quantity  Int
  unitPrice Float  @map("unit_price")

  manufacturerDate DateTime @map("manufacturer_date")
  expiryDate       DateTime @map("expiry_date")

  modeOfShipment String? @map("mode_of_shipment")

  productId    String
  product      Product    @relation(fields: [productId], references: [id])
  supplierId   String
  supplier     Supplier   @relation(fields: [supplierId], references: [id])
  competitorId String
  competitor   Competitor @relation(fields: [competitorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@map("competitor_imports")
}

model Inventory {
  id                   String @id @unique @default(cuid())
  possibleSellingPrice Float  @map("possible_selling_price") // Saling price
  quantity             Int

  productId String  @unique
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
}

model Import {
  id             String  @id @unique @default(cuid())
  unitPrice      Float   @map("unit_price") // The cost of a product
  quantity       Int
  modeOfShipment String? @map("mode_of_shipment")

  manufacturerDate DateTime @map("manufacturer_date")
  expiryDate       DateTime @map("expiry_date")

  supplierId String
  supplier   Supplier @relation(fields: [supplierId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])

  transactions Transaction[]

  createdAt DateTime @default(now()) @map("created_at")

  @@map("imports")
}

model Customer {
  id               String @id @unique @default(cuid())
  organizationName String @map("organization_name")
  catagory         String
  city             String
  phoneNumber      String @map("phone_number")

  transactions Transaction[]

  @@map("customers")
}

model Transaction {
  id        String @id @unique @default(cuid())
  quantity  Int
  unitPrice Float  @map("unit_price") // Default from inventory price

  customerId String   @map("customer_id")
  customer   Customer @relation(fields: [customerId], references: [id])
  productId  String   @map("product_id")
  product    Product  @relation(fields: [productId], references: [id])
  importId   String   @unique
  import     Import   @relation(fields: [importId], references: [id])

  salesPersonId String      @map("sales_person_id")
  salesPerson   SalesPerson @relation(fields: [salesPersonId], references: [userId])

  createdAt DateTime @default(now()) @map("created_at")

  @@map("transactions")
}

model SalesPerson {
  userId       String        @unique @map("user_id")
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]

  @@map("sales_persons")
}

model IODM {
  id        String   @id @unique @default(cuid())
  product   Product? @relation(fields: [productId], references: [id])
  productId String?

  @@map("IODMs")
}

model Pipeline {
  id            String   @id @unique @default(cuid())
  shipment      String?
  quantity      Int
  invoiceAmount Float    @map("invoice_amount")
  productId     String?
  product       Product? @relation(fields: [productId], references: [id])

  @@map("pipelines")
}
