generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @unique @default(cuid())
  fullName    String
  email       String       @unique
  password    String
  role        USER_ROLE    @default(UNKNOWN)
  flag        Flag?
  salesPerson SalesPerson?

  @@index([email])
  @@map("users")
}

model Flag {
  userId      String  @unique
  isSuspended Boolean @default(false) @map("is_suspended")
  user        User    @relation(fields: [userId], references: [id])
}

model ProductWithPrice {
  id               String             @id @unique @default(cuid())
  productId        String
  unitPrice        Float
  quantity         Int
  product          Product            @relation(fields: [productId], references: [id])
  CompetitorImport CompetitorImport[]
}

model Product {
  id                    String                @id @unique @default(cuid())
  productId             String?               @unique @map("product_id")
  genericName           String
  brandName             String
  description           String?
  intendedUse           String?
  unit                  String?
  supplierId            String?
  inventory             Inventory?
  competitorInventories CompetitorInventory[]
  imports               Import[]
  pipelines             Pipeline[]
  supplier              Supplier?             @relation(fields: [supplierId], references: [id])
  transactions          Transaction[]
  IODMProduct           IODMProduct[]
  ProductWithPrice      ProductWithPrice[]
  CostBuildUpProduct    CostBuildUpProduct[]

  @@map("products")
}

model Supplier {
  id                  String             @id @unique @default(cuid())
  manufacturerName    String
  manufacturerId      String?            @unique
  description         String?
  email               String?
  phoneNumber         String?            @map("phone_number")
  country             String?
  IODMs               IODM[]
  competitorImports   CompetitorImport[]
  imports             Import[]
  deliverableProducts Product[]

  @@map("suppliers")
}

model Competitor {
  id                  String                @id @unique @default(cuid())
  name                String
  competitorId        String?               @unique
  licenseNumber       String?               @unique
  tin                 String?               @unique
  email               String?               @unique
  phoneNumber         String?               @map("phone_number")
  isDirectCompetitor  Boolean               @default(false) @map("is_direct_competitor")
  competitorImports   CompetitorImport[]
  competitorInventory CompetitorInventory[]

  @@map("competitors")
}

model CompetitorInventory {
  id           String     @id @unique @default(cuid())
  sellingPrice Float      @map("selling_price")
  productId    String
  competitorId String
  createdAt    DateTime   @default(now()) @map("created_at")
  competitor   Competitor @relation(fields: [competitorId], references: [id])
  product      Product    @relation(fields: [productId], references: [id])

  @@unique([productId, competitorId])
  @@map("competitor_inventories")
}

model CompetitorImport {
  id             String             @id @unique @default(cuid())
  importId       String             @unique @map("import_id")
  amount         Float              @map("unit_price")
  paymentMode    String?
  modeOfShipment String?            @map("mode_of_shipment")
  currency       String?
  supplierId     String
  competitorId   String
  date           DateTime           @map("date")
  createdAt      DateTime           @default(now()) @map("created_at")
  competitor     Competitor         @relation(fields: [competitorId], references: [id], onDelete: Cascade)
  supplier       Supplier           @relation(fields: [supplierId], references: [id])
  products       ProductWithPrice[]

  @@map("competitor_imports")
}

model Inventory {
  id                   String   @id @unique @default(cuid())
  possibleSellingPrice Float    @map("possible_selling_price")
  quantity             Int
  productId            String   @unique
  createdAt            DateTime @default(now()) @map("created_at")
  product              Product  @relation(fields: [productId], references: [id])
}

model Import {
  id               String   @id @unique @default(cuid())
  unitPrice        Float    @map("unit_price")
  quantity         Int
  batch            String
  modeOfShipment   String?  @map("mode_of_shipment")
  manufacturerDate DateTime @map("manufacturer_date")
  expiryDate       DateTime @map("expiry_date")
  supplierId       String
  productId        String
  createdAt        DateTime @default(now()) @map("created_at")
  product          Product  @relation(fields: [productId], references: [id])
  supplier         Supplier @relation(fields: [supplierId], references: [id])

  @@map("imports")
}

model Customer {
  id               String        @id @unique @default(cuid())
  organizationName String        @map("organization_name")
  catagory         String
  city             String
  tinNumber        String
  phoneNumber      String        @map("phone_number")
  transactions     Transaction[]

  @@map("customers")
}

model Transaction {
  id            String      @id @unique @default(cuid())
  quantity      Int
  withCredit    Boolean     @default(false)
  isFinalized   Boolean     @default(true)
  finalizedDate DateTime?
  unitPrice     Float       @map("unit_price")
  customerId    String      @map("customer_id")
  productId     String      @map("product_id")
  salesPersonId String      @map("sales_person_id")
  createdAt     DateTime    @default(now()) @map("created_at")
  customer      Customer    @relation(fields: [customerId], references: [id])
  product       Product     @relation(fields: [productId], references: [id])
  salesPerson   SalesPerson @relation(fields: [salesPersonId], references: [userId])

  @@map("transactions")
}

model SalesPerson {
  userId       String        @unique @map("user_id")
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
  weeklySales  WeeklySales[]

  @@map("sales_persons")
}

model Pipeline {
  id                           String          @id @default(cuid())
  productId                    String
  lcNumber                     String          @unique
  proformaInvoiceNumber        String
  quantity                     Int
  isArrived                    Boolean         @default(false)
  invoice                      Float
  lcOpeningDate                DateTime
  shippingMethod               SHIPPING_METHOD
  portExpectedArrivalDate      DateTime
  portArrivalDate              DateTime?
  warehouseExpectedArrivalDate DateTime
  warehouseArrivalDate         DateTime?
  createdAt                    DateTime        @default(now()) @map("created_at")
  updatedAt                    DateTime        @updatedAt @map("updated_at")
  product                      Product         @relation(fields: [productId], references: [id])

  @@map("pipelines")
}

model IODM {
  id               String        @id @unique @default(cuid())
  createdAt        DateTime      @default(now()) @map("created_at")
  bsc              Float
  dutyTax          Float
  supplierId       String
  freightCost      Float         @default(0.0)
  miscellaneousTax Float         @default(0.0)
  loadingUnloading Float         @map("loading_unloading")
  exchangeRate     Float         @map("exchange_rate")
  insuranceCharge  Float         @map("insurance_charge")
  supplier         Supplier      @relation(fields: [supplierId], references: [id])
  updatedAt        DateTime      @updatedAt @map("updated_at")
  IODMProducts     IODMProduct[]

  @@map("IODMs")
}

model IODMProduct {
  id                  String   @id @unique @default(cuid())
  productId           String?  @map("product_id")
  product             Product? @relation(fields: [productId], references: [id])
  purchasePriceUsd    Float    @map("purchase_price_usd")
  currentSellingPrice Float    @map("current_selling_price")
  createdAt           DateTime @default(now()) @map("created_at")
  productMovement     MOVEMENT @map("product_movement")
  expiryDate          DateTime @map("expiry_date")
  manufactureDate     DateTime @map("manufacture_date")
  quantity            Int
  updatedAt           DateTime @updatedAt @map("updated_at")
  IODMId              String   @map("IODM_id")
  IODM                IODM     @relation(fields: [IODMId], references: [id])
}

model WeeklySales {
  id                  String      @id @default(uuid())
  targetSales         Int
  plannedContacts     Int
  plannedVisits       Int
  plannedNewCustomers Int
  plannedTransactions Int
  actualContacts      Int?        @default(0)
  actualVisits        Int?        @default(0)
  actualNewCustomers  Int?        @default(0)
  actualTransactions  Int?        @default(0)
  startDate           DateTime
  endDate             DateTime
  updatedAt           DateTime    @updatedAt
  createdAt           DateTime    @default(now())
  salesPersonId       String      @map("sales_person_id")
  salesPerson         SalesPerson @relation(fields: [salesPersonId], references: [userId])

  @@unique([salesPersonId, startDate])
  @@map("weeks_sales")
}

enum USER_ROLE {
  UNKNOWN
  DATA_AGGREGATOR
  SALES_PERSON
  ADMIN
}

enum SHIPPING_METHOD {
  AIR
  SEA
}

enum MOVEMENT {
  HIGH
  MEDIUM
  LOW
}

model CostBuildUp {
  id                       Int   @id @default(autoincrement())
  fobPriceUSD              Float // e.g. 47400
  exchangeRate             Float // e.g. 125
  totalFobCostBirr         Float // e.g. 5925000
  fcPurchase               Float // e.g. 2370000
  bankServiceCharges       Float // e.g. 173337.10
  insuranceCharge          Float // e.g. 2820.56
  freightCharge            Float // e.g. 485186
  customsDuty              Float // e.g. 677147.24
  storageCharges           Float // e.g. 15000
  inlandTransport          Float // e.g. 30000
  transitAgentCharge       Float // e.g. 5500
  loadingUnloadingExpenses Float // e.g. 20000
  totalCost                Float // e.g. 9703990.90
  usdPurchasePrice         Float
  mislaneousCost           Float // e.g. 0.00

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  CostBuildUpProducts CostBuildUpProduct[]
}

model CostBuildUpProduct {
  id                     Int    @id @default(autoincrement())
  productId              String
  unitPrice              Float // e.g. 47400 / 1000 = 47.40
  quantity               Int
  competitorSellingPrice Float // e.g. 47400 / 1000 = 47.40
  sellingPrice           Float? // e.g. 47400 / 1000 = 47.40
  
  costBuildUpId          Int
  costBuildUp CostBuildUp @relation(fields: [costBuildUpId], references: [id])
  product     Product     @relation(fields: [productId], references: [id])

  @@unique([productId, costBuildUpId])
}
